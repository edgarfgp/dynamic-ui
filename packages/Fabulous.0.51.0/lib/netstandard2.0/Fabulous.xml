<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fabulous</name></assembly>
<members>
<member name="T:Fabulous.Cmd`1">
<summary>
 Cmd - container for subscriptions that may produce messages
</summary>
</member>
<member name="T:Fabulous.Sub`1">
<summary>
 Subscription - return immediately, but may schedule dispatch of a message at any time
</summary>
</member>
<member name="T:Fabulous.Dispatch`1">
<summary>
 Dispatch - feed new message into the processing loop
</summary>
</member>
<member name="P:Fabulous.ViewElement.TargetType">
<summary>
 Get the type created by the visual element
</summary>
</member>
<member name="P:Fabulous.ViewElement.AttributesKeyed">
<summary>
 Get the attributes of the visual element
</summary>
</member>
<member name="P:Fabulous.ViewElement.Attributes">
<summary>
 Get the attributes of the visual element
</summary>
</member>
<member name="M:Fabulous.ViewElement.WithAttribute``1(Fabulous.AttributeKey{``0},``0)">
<summary>
 Produce a new visual element with an adjusted attribute
</summary>
</member>
<member name="M:Fabulous.ViewElement.UpdateInherited(Microsoft.FSharp.Core.FSharpValueOption{Fabulous.ViewElement},Fabulous.ViewElement,System.Object)">
<summary>
 Differentially update the inherited attributes of a visual element given the previous settings
</summary>
</member>
<member name="M:Fabulous.ViewElement.UpdateIncremental(Fabulous.ViewElement,System.Object)">
<summary>
 Differentially update a visual element given the previous settings
</summary>
</member>
<member name="M:Fabulous.ViewElement.Update(System.Object)">
<summary>
 Apply initial settings to a freshly created visual element
</summary>
</member>
<member name="M:Fabulous.ViewElement.TryGetAttributeKeyed``1(Fabulous.AttributeKey{``0})">
<summary>
 Get an attribute of the visual element
</summary>
</member>
<member name="M:Fabulous.ViewElement.TryGetAttribute``1(System.String)">
<summary>
 Get an attribute of the visual element
</summary>
</member>
<member name="M:Fabulous.ViewElement.GetAttributeKeyed``1(Fabulous.AttributeKey{``0})">
<summary>
 Get an attribute of the visual element
</summary>
</member>
<member name="M:Fabulous.ViewElement.Create">
<summary>
 Create the UI element from the view description
</summary>
</member>
<member name="T:Fabulous.ViewElement">
<summary>
 A description of a visual element
</summary>
</member>
<member name="P:Fabulous.AttributesBuilder.Attributes">
<summary>
 Get the attributes of the visual element
</summary>
</member>
<member name="M:Fabulous.AttributesBuilder.Close">
<summary>
 Get the attributes of the visual element
</summary>
</member>
<member name="M:Fabulous.AttributesBuilder.Add``1(Fabulous.AttributeKey{``0},``0)">
<summary>
 Produce a new visual element with an adjusted attribute
</summary>
</member>
<member name="T:Fabulous.AttributesBuilder">
<summary>
 A description of a visual element
</summary>
</member>
<member name="M:Fabulous.ProgramRunner`3.SetCurrentModel(`1,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{`2,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}})">
<summary>
 Set the current model, e.g. on resume
</summary>
</member>
<member name="T:Fabulous.ProgramRunner`3">
<summary>
 Starts the Elmish dispatch loop for the page with the given Elmish program
</summary>
</member>
<member name="T:Fabulous.Program`3">
<summary>
 Program type captures various aspects of program behavior
</summary>
</member>
<member name="T:Fabulous.ProgramDispatch`1">
<summary>
 We store the current dispatch function for the running Elmish program as a 
 static-global thunk because we want old view elements stored in the `dependsOn` global table
 to be recyclable on resumption (when a new ProgramRunner gets created).
</summary>
</member>
<member name="M:Fabulous.IHost.SetRootView(System.Object)">
<summary>
 Sets a new instance of the root view item (e.g. Xamarin.Forms.Application.MainPage)
</summary>
</member>
<member name="M:Fabulous.IHost.GetRootView">
<summary>
 Gets a reference to the root view item (e.g. Xamarin.Forms.Application.MainPage)
</summary>
</member>
<member name="T:Fabulous.IHost">
<summary>
 Representation of the host framework with access to the root view to update (e.g. Xamarin.Forms.Application)
</summary>
</member>
<member name="M:Fabulous.Cmd.ofAsyncMsgOption``1(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.FSharpOption{``0}})">
<summary>
 Command to issue a message at the end of an asynchronous task, only when Option.IsSome = true
</summary>
</member>
<member name="M:Fabulous.Cmd.ofAsyncMsg``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Command to issue a message at the end of an asynchronous task
</summary>
</member>
<member name="M:Fabulous.Cmd.ofSub``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit})">
<summary>
 Command to call the subscriber
</summary>
</member>
<member name="M:Fabulous.Cmd.batch``2(``0)">
<summary>
 Aggregate multiple commands
</summary>
</member>
<member name="M:Fabulous.Cmd.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}})">
<summary>
 When emitting the message, map to another type
</summary>
</member>
<member name="M:Fabulous.Cmd.ofMsgOption``1(Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Command to issue a specific message, only when Option.IsSome = true
</summary>
</member>
<member name="M:Fabulous.Cmd.ofMsg``1(``0)">
<summary>
 Command to issue a specific message
</summary>
</member>
<member name="M:Fabulous.Cmd.none``1">
<summary>
 None - no commands, also known as `[]`
</summary>
</member>
<member name="T:Fabulous.Cmd">
<summary>
 Cmd module for creating and manipulating commands
</summary>
</member>
<member name="M:Fabulous.ProgramModule.runFabulous``2(Fabulous.IHost,Fabulous.Program{Microsoft.FSharp.Core.Unit,``0,``1})">
<summary>
 Run the app with Fabulous
</summary>
</member>
<member name="M:Fabulous.ProgramModule.runWithFabulous``3(Fabulous.IHost,``0,Fabulous.Program{``0,``1,``2})">
<summary>
 Run the app with Fabulous
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withSyncAction``3(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}},Fabulous.Program{``0,``1,``2})">
<summary>
 Set the syncAction function
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withSyncDispatch``3(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Fabulous.Program{``1,``2,``0})">
<summary>
 Set the syncDispatch function
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withCanReuseView``3(Microsoft.FSharp.Core.FSharpFunc{Fabulous.ViewElement,Microsoft.FSharp.Core.FSharpFunc{Fabulous.ViewElement,System.Boolean}},Fabulous.Program{``0,``1,``2})">
<summary>
 Set the canReuseView function
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withDebug``3(Fabulous.Program{``0,``1,``2})">
<summary>
 Set debugging to true
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withErrorHandler``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.String,System.Exception},Microsoft.FSharp.Core.Unit},Fabulous.Program{``0,``1,``2})">
<summary>
 Handle dispatch loop exceptions
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withTrace``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Fabulous.Program{``2,``1,``0})">
<summary>
 Trace all the messages as they update the model
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withConsoleTrace``3(Fabulous.Program{``0,``1,``2})">
<summary>
 Trace all the updates to the console
</summary>
</member>
<member name="M:Fabulous.ProgramModule.withSubscription``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}},Fabulous.Program{``2,``0,``1})">
<summary>
 Subscribe to external source of events.
 The subscription is called once - with the initial (or resumed) model, but can dispatch new messages at any time.
</summary>
</member>
<member name="M:Fabulous.ProgramModule.mkProgramWithCmdMsg``4(Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``1,Microsoft.FSharp.Collections.FSharpList{``2}}},Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``1,Microsoft.FSharp.Collections.FSharpList{``2}}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.Unit},Fabulous.ViewElement}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``3,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}})">
<summary>
 Typical program, new commands are produced discriminated unions returned by `init` and `update` along with the new state.
</summary>
</member>
<member name="M:Fabulous.ProgramModule.mkSimple``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit},Fabulous.ViewElement}})">
<summary>
 Simple program that produces only new state with `init` and `update`.
</summary>
</member>
<member name="M:Fabulous.ProgramModule.mkProgram``3(Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``1,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``1,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit}}}}},Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.Unit},Fabulous.ViewElement}})">
<summary>
 Typical program, new commands are produced by `init` and `update` along with the new state.
</summary>
</member>
<member name="T:Fabulous.ProgramModule">
<summary>
 Program module - functions to manipulate program instances
</summary>
</member>
<member name="M:Fabulous.SimplerHelpers.fixf``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Memoize a callback that has explicit dependencies.
 NOTE: use with caution. The function must not capture any values besides &quot;dispatch&quot;
</summary>
</member>
<member name="M:Fabulous.SimplerHelpers.fix``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Memoize a callback that has no interesting dependencies.
 NOTE: use with caution. The function must not capture any values besides &quot;dispatch&quot;
</summary>
</member>
<member name="M:Fabulous.SimplerHelpers.dependsOn``2(``0,Microsoft.FSharp.Core.FSharpFunc{Fabulous.SimplerHelpers.DoNotUseModelInsideDependsOn,Microsoft.FSharp.Core.FSharpFunc{``0,``1}})">
<summary>
 Memoize part of a view model computation. Also prevent the use of the model inside
 the computation except where explicitly de-referenced.

 Usage: &quot;dependsOn model.Count (fun model count -&gt; ...)&quot;

 Note, this function uses &quot;f.GetType()&quot; to get a unique code location.
</summary>
</member>
</members>
</doc>
